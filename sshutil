#!/bin/bash

FILENAME=$HOME'/.sshutil/config'
FIRST_ARG=$1
SECOND_ARG=$2
THIRD_ARG=$3
ALIAS=''
SECOND_ALIAS=''
CMD=''

#
# JOIN ALL ARGUMENTS TO A STRING
#
# Takes the delmiter as the first argument.
# Takes other arguments after the first as array items to join.
function join {
local IFS="$1"
shift 1 
echo "$*" 
}

function checkRootPath {
if [[ $1 == /* ]]; then echo 1; else echo 0; fi
}


# SET WHICH COMMAND SHALL BE EXECUTED 
# BASED ON PARAMETERS ADDED TO COMMAND
if [[ $FIRST_ARG == '-c' ]]; then

	# GET ALIASES AND PATHS FROM ARGUMENTS
	arr=(${SECOND_ARG//':'/' '}) # split string to array
	arr2=(${THIRD_ARG//':'/' '}) # split string to array
	
	echo ${arr[@]}
	echo ${arr2[@]}

	# SET FIRST ALIAS AND PATH
	ALIAS=${arr[0]}
	EXTRA_PATH=${arr[1]}

	# SET SECOND ALIAS AND PATH
	SECOND_ALIAS=${arr2[0]}
	SECOND_EXTRA_PATH=${arr2[1]}

	# SET COMMAND TYPE
	CMD='copy'
elif [[ $FIRST_ARG == '-l' ]]; then

	CMD='list'
else 

	# GET ALIASES AND PATHS FROM ARGUMENTS
	arr=( ${FIRST_ARG//':'/' '} ) # split string to array

	ALIAS=${arr[0]}
	EXTRA_PATH=${arr[1]}
	CMD='connect'
fi
# SET WHICH COMMAND TO EXECUTE END

# DEFINE ALL PROPERTIES
USER=''
HOST=''
PASS=''
PROMPT='\$\s*' # is regexp
REMOTEDIR='~/'

# FIND AND SET PROPERTIES ABOVE 
# BASED ON ALIAS VARIABLE
#
function setConfig {

ALIAS=$1
ALIASFOUND=false
# RESET ALL PROPERTIES TO DEFAULT
USER=''
HOST=''
PASS=''
PROMPT='\$\s*' # is regexp
REMOTEDIR=$REMOTEDIR

# SEARCH FOR ALIAS AND PROPERTIES
while read -r line
do
	length=${#line}
	lineArray=($line)

	property=${lineArray[0]}
	value=${lineArray[1]}
	colNo=${#lineArray[*]}

	# CHECK FOR ALIAS
	if [[ $property == 'ALIAS' ]]; then
		# FIND ALIAS
		if [[ $value == $ALIAS ]]; then
			echo $property $value
			ALIASFOUND=true
		fi
	fi

	# IF ALIAS HAS BEEN FOUND
	if [ $ALIASFOUND = true ]; then

		# GET ALL PROPERTIES 
		if [[ $property == 'USER' ]]; then
			USER=$value
			echo $USER
		fi
		if [[ $property == 'HOST' ]]; then
			HOST=$value
		fi
		if [[ $property == 'PASS' ]]; then

			PASS=$value

			if [ $colNo -gt 2 ]; then
				PASS=${lineArray[*]:2:$colNo}
				PASS=$($PASS)
			fi
		fi
		if [[ $property == 'USE_KEY' ]]; then
			USE_KEY=$value
			EXPECT="*phrase*"
		fi
		if [[ $property == 'PROMPT' ]]; then
			PROMPT=$value
		fi
		if [[ $property == 'REMOTEDIR' ]]; then
			REMOTEDIR=$value
		fi

		# END LOOP
		if [ $length -eq 0 ]; then
			break;
		fi
	fi
done < $FILENAME

# ECHO ALIAS NOT FOUND
if [ $ALIASFOUND = false ]; then
	echo "alias $ALIAS not found"
fi

echo ""
}
# setConfig END

# Executes script for 
# connecting via ssh to the desired
# remote directory
function connect {

# SET CONFIG PROPERTIES
setConfig $ALIAS

if [ $ALIASFOUND = true ]; then

	# EXECUTE EXPECT COMMAND
	$HOME/.sshutil/ssh.exp ssh $USER@$HOST $PROMPT "cd $REMOTEDIR$EXTRA_PATH" $PASS
fi
}
# connect END

# Execute script to
# copy files from one location
# to another based on 
# config settings.
function copy {

echo 'copy'
echo "---------"

# GET DETAILS OF FIRST ALIAS
setConfig $ALIAS
if [ $ALIASFOUND = true ]; then
	FIRST_LOGIN=$USER'@'$HOST
	FIRST_REMOTEDIR=$REMOTEDIR
	FIRST_EXTRA_PATH=$FIRST_REMOTEDIR''$EXTRA_PATH
	FIRST_PASSWORD=$PASS
	FIRST_PROMPT=$PROMPT
	# GET DETAILS OF SECOND ALIAS IF FIRST ONE WAS FOUND
	setConfig $SECOND_ALIAS
	if [ $ALIASFOUND = true ]; then
		SECOND_PATH=$USER'@'$HOST':'$REMOTEDIR''$SECOND_EXTRA_PATH
		SECOND_PASSWORD=$PASS
		SECOND_CMD="scp -r $FIRST_EXTRA_PATH $SECOND_PATH"

		# EXECUTE EXPECT COMMAND
		$HOME/.sshutil/ssh.exp ssh $FIRST_LOGIN $FIRST_PROMPT "cd $FIRST_REMOTEDIR" $FIRST_PASSWORD "$SECOND_CMD" $SECOND_PASSWORD
	else
		echo "Second alias "$ALIAS" not found"
	fi
else
	echo "First alias "$ALIAS" not found"
fi

}
# copy END 

#
# LIST ALL SET ALIASES
#
# Iterates through config file like
# aforementioned setConfig(), but
# only echoes an alias when 
# encountered.
function list {

while read -r line
do
	length=${#line}
	lineArray=($line)

	property=${lineArray[0]}
	value=${lineArray[1]}

	# CHECK FOR ALIAS
	if [[ $property == 'ALIAS' ]]; then
		echo $value
	fi

done < $FILENAME

}
# list END

# EXECUTE COMMAND BASED ON FIRST PARAMETER
if [[ $CMD == 'connect' ]]; then
	# EXECUTE EXPECT COMMAND
	connect
elif [[ $CMD == 'list' ]]; then
	list
elif [[ $CMD == 'copy' ]]; then
	copy
fi

